import Section from "../../components/Section";
import { useCallback, useEffect, useState } from "react";
import { getWatch } from "../../fetch";
import { useRouter } from "next/router";
import Iframe from "react-iframe";
import Button from "../../components/Button";
import Head from "next/head";
import { BookmarkIcon } from "@heroicons/react/24/outline";
import { BookmarkIcon as BookmarkIconSolid } from "@heroicons/react/24/solid";
import { addToLocalStorage } from "../../helpers/addToLocalStorage";
import Header from "../../components/Header";

function Slug() {
  const { query, isReady } = useRouter();
  const [result, setResult] = useState({});
  const [loading, setLoading] = useState(false);
  const [sv, setSv] = useState([]);
  const [isSaved, setIsSaved] = useState(false);

  const getData = useCallback(async (slug) => {
    setLoading(true);
    const data = await getWatch(slug);
    setResult(data);
    setLoading(false);
  }, []);

  //last watch
  useEffect(() => {
    if (isReady) {
      getData(query.slug);
      localStorage.setItem(
        "last-watch",
        JSON.stringify({
          url: query.slug,
          timestamp: new Date().getTime(),
        })
      );
    }
  }, [getData, query.slug, isReady]);

  const saveHandler = (e) => {
    e.preventDefault();
    addToLocalStorage("saved", {
      title: result.title,
      timestamp: new Date().getTime(),
      slug: query.slug,
    });
    setIsSaved(true);
  };

  useEffect(() => {
    const saved = window.localStorage.getItem("saved");

    setSv(JSON.parse(saved));
  }, []);

  useEffect(() => {
    if (sv !== null) {
      sv.filter((s) => setIsSaved(s.slug === query.slug));
    }
  }, [query.slug, sv]);

  const handleRemove = (slug) => {
    const newSv = sv.filter((save) => save.slug !== slug);
    localStorage.setItem("saved", JSON.stringify(newSv));
    setIsSaved(false);
  };

  return (
    <>
      <Head>
        <title>Streaming {result.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Section>
        <Header />
        {loading ? (
          <h1>Loading....</h1>
        ) : (
          <div>
            <Iframe
              url={result.video_uri}
              height="300px"
              id="myId"
              className="w-full"
              display="initial"
              position="relative"
              allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture; fullscreen;"
            />
            <div className="flex justify-between items-center">
              <div>
                <h1 className="md:text-lg text-gray-700 font-semibold mt-3">
                  {result.title}
                </h1>
                <h2 className="font-light text-xs">{result.released}</h2>
              </div>

              {isSaved ? (
                <button type="button" onClick={() => handleRemove(query.slug)}>
                  <BookmarkIconSolid className="h-5 text-red-500" />
                </button>
              ) : (
                <button type="button" onClick={saveHandler}>
                  <BookmarkIcon className="h-5" />
                </button>
              )}
            </div>
            <div className="mt-5 flex items-center justify-between">
              <Button
                backgroundColor="bg-gray-700"
                text="Previous"
                href={`/watch/${result.prev_eps}`}
              />
              <Button
                backgroundColor="bg-blue-500"
                text="Next"
                href={`/watch/${result.next_eps}`}
              />
            </div>
            <div className="mt-5">
              <span className="font-semibold text-gray-700 text-sm">
                * Jika blank refresh
              </span>
            </div>
          </div>
        )}
      </Section>
    </>
  );
}

export default Slug;
